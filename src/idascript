#!/usr/bin/env python3
###############################################################
# Python version of the idascript utility for IDA.
#
# Original idascript utility: http://www.hexblog.com/?p=128
#
###############################################################

from __future__ import print_function
import os
import sys
import tempfile
import subprocess
import enum

from pathlib import Path
from multiprocessing import Pool, Queue, Manager
import queue
import os
from typing import List, Optional, Iterable, Union, Generator
import logging
import time

logging.basicConfig(level=logging.WARNING)
# logging.basicConfig(level=logging.DEBUG)

TIMEOUT_RETURNCODE: int = -1

BINARY_FORMAT = {'application/x-dosexec',
                 'application/x-sharedlib',
                 'application/x-mach-binary',
                 'application/x-executable',
                 'application/x-pie-executable'}

EXTENSIONS_WHITELIST = {'application/octet-stream': ['.dex',".i64",".idb"]}


IDA_INSTALL_PATH = "%%IDA_INSTALL_PATH%%"

def iter_binary_files(path: Union[str, Path]) -> Generator[Path, None, None]:
    """
    Iterate a given directory looking for all the binary executable
    files avec the magic mime type: x-doxexec, x-sharedlib, x-mach-binary
    and x-executable.

    :param path: Path where to start looking for binary files
    :type path: Union[str, Path]
    :return: Generator of binary file paths
    :rtype: Generator[Path]
    """

    p = Path(path)
    if p.is_file():
        mime_type = magic.from_file(str(p), mime=True)
        if mime_type in BINARY_FORMAT:
            yield p
        elif p.suffix in EXTENSIONS_WHITELIST.get(mime_type, []):
            yield p
    elif p.is_dir():
        for child in p.iterdir():
            yield from iter_binary_files(child)



class IDAException(Exception):
    """
    Base class for exceptions in the module.
    """

    pass


class IDANotStared(IDAException):
    """
    This exception is raised when attempting
    to call a function of the `IDA` class before
    having called `start`.
    """

    pass


class IDAModeNotSet(IDAException):
    """
    This exception is raised when the IDA Mode has not been set before calling `start`.
    """

    pass


class MultiIDAAlreadyRunning(IDAException):
    """
    Exception raised if the `map` function of MultiIDA
    is called while another map operation is still pending.
    Design choices disallow launching two MultiIDA.map
    function in the same time.
    """

    pass


class IDAMode(enum.Enum):
    """
    Different modes possible for the IDA class
    """

    # Default value
    NOTSET = enum.auto()

    # Used when IDA will be launched for an IDAPython script
    IDAPYTHON = enum.auto()

    # Used when IDA will be launched directly
    DIRECT = enum.auto()


class IDA:
    """
    Class representing an IDA execution on a given file
    with a given script. This class is a wrapper to
    subprocess IDA.
    """

    def __init__(self,
                 binary_file: Union[Path, str],
                 script_file: Optional[Union[str, Path]] = None,
                 script_params: Optional[List[str]] = None,
                 timeout: Optional[float] = None):
        """
        :param binary_file: path of the binary file to analyse
        :param script_file: path to the Python script to execute on the binary (if required)
        :param script_params: additional parameters to send either to the script or IDA directly
        """

        if not Path(binary_file).exists():
            raise FileNotFoundError("Binary file: %s" % binary_file)

        self.bin_file: Path = Path(binary_file).resolve()  #: File to the binary
        self._process = None

        self.script_file: Optional[Path] = None  #: script file to execute
        self.params: List[str] = []  #: list of paramaters given to IDA

        self.timeout: Optional[float] = timeout  #: Timeout for IDA execution
        self._outfile_ = None # log file content
        self._input_ = None

        self.__output = None
        if script_file is not None:  # Mode IDAPython
            self._set_idapython(script_file, script_params)
        else:  # Direct mode
            self._set_direct(script_params)
        
    def _set_idapython(self, script_file: Union[Path, str], script_params: List[str] = None) -> None:
        """
        Set IDAPython script parameter.

        :param script_file: path to the script to execute on the binary file
        :param script_params: additional parameters sent to the script (available via idc.ARGV in idapython)
        """
        
        if not Path(script_file).exists():
            raise FileNotFoundError("Script file: %s" % script_file)

        if script_params is None:
            script_params = []

        if script_params:
            if not isinstance(script_params, list):
                raise TypeError("script_params parameter should be a list")
        self.script_file = Path(script_file).resolve()
        fd,_input_tmp = tempfile.mkstemp(suffix=self.script_file.suffix)
        os.close(fd)
        self._input_ = Path(_input_tmp)

        if not self.script_file.exists():
            raise FileNotFoundError("Script file: %s" % self.script_file)
        script_file_fd = self.script_file.open("r")
        _script_code = script_file_fd.read()
        formatted_code = '\n'.join('    ' + line for line in _script_code.splitlines())

        script_stand='''
import idascript
import traceback
import sys
import idc
#user input code
try:
    __start__run = 1
{code}
except Exception as e:
    traceback.print_exc()
idascript.exit()
'''.format(code = formatted_code)
        script_file_fd.close()
        
        with self._input_.open("w") as _input_fd:
            _input_fd.write(script_stand)
        self.params = [x.replace('"', '\\"') for x in script_params] if script_params else []
        fd,_outfile_tmp = tempfile.mkstemp()
        os.close(fd)
        self._outfile_ = Path(_outfile_tmp)
        self.params = ['__idascript_active__', self._outfile_.as_posix()] + self.params
        self.mode = IDAMode.IDAPYTHON

    def _set_direct(self, script_options: List[str]) -> None:
        """
        Set parameters script in direct mode

        :param script_options: List of script options
        :return: None
        """

        for option in script_options:
            if ':' not in option:
                raise TypeError('Options must have a ":"')
            self.params.append(f'-O{option}')

        self.mode = IDAMode.DIRECT

    def start(self) -> None:
        """
        Start the IDA process on the binary.
        """

        cmd_line = [IDA_BINARY.as_posix(),'-B', '-A']

        if self.mode == IDAMode.IDAPYTHON:
            params = " "+" ".join(self.params) if self.params else ""
            cmd_line.append('-S%s%s' % (self._input_.as_posix(), params))
        elif self.mode == IDAMode.DIRECT:
            cmd_line.extend(self.params)
        else:
            raise

        cmd_line.append(self.bin_file.as_posix())
        logging.debug(f"run: {' '.join(cmd_line)}")

        env = os.environ
        env["TVHEADLESS"] = "1"
        env["TERM"] = "xterm"

        self._process = subprocess.Popen(
            cmd_line,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            # See `https://www.hex-rays.com/blog/igor-tip-of-the-week-08-batch-mode-under-the-hood/`_
            env=env
        )
        # self._input_.unlink()

    @property
    def returncode(self) -> Optional[int]:
        """
        Get the returncode of the process. Raise IDANotStart
        if called before launching the process.
        """

        if self._process:
            return self._process.returncode
        else:
            raise IDANotStared()

    @property
    def terminated(self) -> bool:
        """
        Boolean function returning True if the process is terminated
        """

        if self._process:
            if self._process.poll() is not None:
                return True
            else:
                return False
        else:
            raise IDANotStared()

    @property
    def pid(self) -> int:
        """
        Returns the PID of the IDA process

        :return: int (PID of the process)
        """

        if self._process:
            return self._process.pid
        else:
            raise IDANotStared()
    @property
    def output(self)->str:
        '''
        Returns the output of the IDAScript
        :return: str 
        '''
        if self.__output:
            return self.__output
        
        if self._outfile_.exists():
            with self._outfile_.open("r") as fd:
                self.__output = fd.read()
        return self.__output

    def __del__(self):
        if self._process and self._process.poll() is not None:
            self._process.terminate()
        
        if self._outfile_.exists():
            self._outfile_.unlink()

        if self._input_.exists():
            self._input_.unlink()

    def wait(self) -> int:
        """
        Wait for the process to finish. This function hangs until
        the process terminate. A timeout can be given which raises
        TimeoutExpired if the timeout is exceeded (subprocess mechanism).
        """

        if self._process:
            try:
                if self.timeout == -1:
                    return self._process.wait() # wait until process terminal
                return self._process.wait(self.timeout)
            except subprocess.TimeoutExpired:
                self._process.terminate()
                return TIMEOUT_RETURNCODE
        else:
            raise IDANotStared()

    def terminate(self) -> None:
        """
        Call terminate on the IDA process (kill -15)
        """

        if self._process:
            self._process.terminate()
        else:
            raise IDANotStared()

    def kill(self) -> None:
        """
        Call kill on the IDA subprocess (kill -9)
        """

        if self._process:
            self._process.kill()
        else:
            raise IDANotStared()

# # Check usage
# if len(sys.argv) < 2:
#     print("", file=sys.stderr)
#     print("Usage: %s [--64bit] <target file> <ida script file> [script arguments]" % os.path.basename(sys.argv[0]), file=sys.stderr)
#     print("", file=sys.stderr)
#     sys.exit(1)

# # Always use the 64-bit version of IDA if it was explicitly specified
# if sys.argv[1] == '--64bit':
#     suffix = '64'
#     sys.argv.pop(1)
# else:
#     suffix = ''


import argparse
def parse_args():
    parser = argparse.ArgumentParser(description="A script for processing with IDA Pro")

    parser.add_argument('-s', '--script', type=str, metavar="<ida script>", 
                        help="IDAPython script")

    parser.add_argument('-t', '--timeout', type=float, default=-1,
                        help="Timeout (-1 means no timeout)")
                        
    parser.add_argument('--enable-32bit', action='store_true', help="Enable 32-bit mode")

    # 添加位置参数
    parser.add_argument('file', type=str, metavar="<file|path>", 
                        help="File or path to process")

    parser.add_argument('params', nargs=argparse.REMAINDER,
                        help="Additional parameters")

    return parser.parse_args()


IDA_BINARY = None

def main():
    global IDA_BINARY
    args = parse_args()
    file = Path(args.file)

    IDA_TARGET = "idat64" # 64 bit default 

    # 32 bit
    if file.suffix == ".idb":
        IDA_TARGET = "idat"
    if args.enable_32bit:
        IDA_TARGET = "idat"

    if sys.platform == 'win32':
        IDA_TARGET += '.exe'
    
    IDA_BINARY = (Path(IDA_INSTALL_PATH)/IDA_TARGET).resolve()
    
    ida = IDA(file, args.script, args.params, args.timeout)
    ida.start()
    res = ida.wait()
    if res == TIMEOUT_RETURNCODE:
        print("Run script {}s, timeout ...".format(args.timeout))
    else:
        print(ida.output)

if __name__ == "__main__":
    main()